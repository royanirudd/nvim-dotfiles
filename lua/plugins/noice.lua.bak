return {
	"folke/noice.nvim",
	event = "VeryLazy",
	opts = {
		-- add any options here
	},
	dependencies = {
		-- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
		"MunifTanjim/nui.nvim",
		-- OPTIONAL:
		--   `nvim-notify` is only needed, if you want to use the notification view.
		--   If not available, we use `mini` as the fallback
		"rcarriga/nvim-notify",
	},
	config = function()
		require("noice").setup({
			lsp = {
				-- override markdown rendering so that **cmp** and other plugins use **Treesitter**
				override = {
					["vim.lsp.util.convert_input_to_markdown_lines"] = true,
					["vim.lsp.util.stylize_markdown"] = true,
					["vim.lsp.util.stylize_markdown_code_blocks"] = true,
				},
			},
			presets = {
				bottom_search = true, -- use a classic bottom cmdline for search
				command_palette = true, -- position the cmdline and popupmenu together
				long_message_to_split = true, -- long messages will be sent to a split
				inc_rename = false, -- enables an input dialog for inc-rename.nvim
				lsp_doc_border = false, -- add a border to hover docs and signature help
			},
			routes = {
				{
					filter = {
						event = "msg_show",
						any = {
							{ find = "%d+L, %d+B" },
							{ find = "; after #%d+" },
							{ find = "; before #%d+" },
						},
					},
					view = "mini",
				},
			},
			views = {
				cmdline_popup = {
					position = {
						row = 5,
						col = "50%",
					},
					size = {
						width = 60,
						height = "auto",
					},
				},
				popupmenu = {
					relative = "editor",
					position = {
						row = 8,
						col = "50%",
					},
					size = {
						width = 60,
						height = 10,
					},
					border = {
						style = "rounded",
						padding = { 0, 1 },
					},
					win_options = {
						winhighlight = "NormalFloat:CompeDocumentation,FloatBorder:CompeDocumentationBorder,CursorLine:CompeDocumentationSel,CursorColumn:CompeDocumentationSel",
					},
				},
			},
			notify = {
				-- Noice can be used as `vim.notify` so, fully compatible with which-key
				backend = "notify",
				level = nil,
				stages = "static",
			},
			messages = {
				-- NOTE: If you enable messages, then the msg_* commands will be overridden
				-- to use the Noice logging system. If you want any other plugin to use it,
				-- you need to tell them to use it by setting the `backend` option to `noice`
				enabled = true,
				view = "mini",
			},
			commands = {
				history = {
					view = "split",
				},
				all = {
					view = "split",
				},
			},
			popupmenu = {
				enabled = true,
				backend = "cmp",
				-- Icons for completion item kinds (see defaults at ~/.config/nvim/lazy/noice.nvim/lua/noice/text/format.lua)
				kind_icons = true,
			},
			throttle = 1000 / 30, -- how frequently to check for new messages
		})

		-- Keymaps for Noice
		vim.keymap.set("n", "<leader>Z", "<cmd>NoiceDismiss<CR>", { desc = "Dismiss Noice Message" })
	end,
}
